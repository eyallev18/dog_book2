{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/BreedsPage.js","pages/SpecificDogPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","props","state","element","this","dogbreeds","handleSelection","listGroupItems","map","dogtype","index","value","key","data-index","listofdogsImage","srcOfRandomDogList1","className","Capitalize","src","data","message","length","redirectToBreedsPage","to","Jumbotron","onChange","Button","variant","type","onClick","refreshPage","id","Component","BreedsPage","dogs","selectedDog","setState","redirectTo","selected","listDogImage","dogsView","e","showSpecificDog","alt","Container","handlebacktohomepage","SpecificDogPage","isSelected","handlebacktobreedpage","App","srcOfRandomDogList","bind","srcOfRandomDog","Axios","get","res","breedNameArray","Object","keys","i","newRandom","push","event","target","breedUrl","res2","dogsToShow","values","str","charAt","toUpperCase","slice","dogToBig","window","location","reload","exact","path","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1664f3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './HomePage.css';\r\nimport { Jumbotron, DropdownButton, Dropdown, Button } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Axios from \"axios\";\r\n\r\n\r\n\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            element: \"show text-center m-10 flash\"\r\n\r\n        }\r\n\r\n        // https://dog.ceo/api/breed/{this.state.dogbreeds}/images/random\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        const { dogbreeds, handleSelection } = this.props;\r\n        const listGroupItems = dogbreeds.map((dogtype, index) => {\r\n            return (<option value={dogtype} key={index} data-index={index} > {dogtype}</option>);\r\n        })\r\n\r\n        const listofdogsImage = this.props.srcOfRandomDogList1.map((dogtype, index) => {\r\n            return (<div key={index} className=\"col-md-2 m-2\">\r\n                <h4 className=\"text-center\">{this.props.Capitalize(dogbreeds[index])}</h4>\r\n                <img src={dogtype.data.message} value={index} />\r\n            </div>\r\n            );\r\n        })\r\n\r\n        if (listofdogsImage.length > 0) {\r\n            this.state.element += \" hidden\";\r\n        }\r\n        //alert(this.state.element);\r\n        if (this.props.redirectToBreedsPage) {\r\n            return <Redirect to=\"/breeds\" />\r\n        }\r\n        return (\r\n            <div>\r\n\r\n                <Jumbotron className=\"tobefix\">\r\n                    <h1 className=\"dogbreed\">Dog Book</h1>\r\n                    <p>\r\n                        Man's Best Firend\r\n                    </p>\r\n                    <select onChange={handleSelection} value=\"\" >\r\n                        <option value=\"\"  > Choose here Dog Breed to view </option>\r\n                        {listGroupItems}\r\n                    </select>\r\n                    <Button variant=\"primary\" type=\"button\" onClick={() => { this.props.refreshPage(); }}>Please click to refresh images</Button>\r\n\r\n                    <h1 id=\"hidden\" className={this.state.element} >Please wait while random dog Pictures are loaded </h1>\r\n                </Jumbotron>\r\n                <div className=\"randomimage row \">\r\n\r\n                    {listofdogsImage}\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React, { Component } from 'react';\r\nimport './BreedsPage.css'\r\nimport { Container, Row, Col, Button, Modal, Card } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Axios from \"axios\";\r\n\r\n\r\nclass BreedsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dogs: [],\r\n            selectedDog: this.props.selectedDog\r\n\r\n        }\r\n\r\n        this.setState = ({\r\n            selectedDog: !this.props.selectedDog\r\n        })\r\n    }\r\n    selectedDogId(id) {\r\n        this.setState({\r\n            redirectTo: \"id\"\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        if ((!this.state.selectedDog) || (this.state.selectedDog === 'select')) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n        if (this.props.selected) {\r\n            return <Redirect to=\"/specificbreed\" />\r\n        }\r\n        let { selectedDog } = this.state;\r\n\r\n        const listDogImage = this.props.dogsView.map((dogtype, index) => {\r\n            return (\r\n                <div key={index} className=\"col-md-2 m-2\" onClick={(e) => { this.props.showSpecificDog(e) }} >\r\n                    <img src={dogtype} alt=\"not_found\" ></img>\r\n                </div>\r\n            );\r\n\r\n        })\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                <Container>\r\n                    <div className=\"dog-header\">\r\n                        <h1 className=\"text-center\">{this.props.Capitalize(this.props.selectedDog)}'s Breed</h1>\r\n                        <h2 className=\"text-center\">click on any image to see it in big size</h2>\r\n                        <Button variant=\"primary\" type=\"button\" onClick={() => { this.props.handlebacktohomepage(); this.state.selectedDog = \"\"; }}>Back to Breed Selection</Button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {listDogImage}\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BreedsPage","import React, { Component } from 'react'\r\nimport { Jumbotron, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Button } from 'react-bootstrap';\r\nimport './SpecificDogPage.css'\r\n\r\n\r\n\r\nexport default class SpecificDogPage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.isSelected) {\r\n            return <Redirect to=\"/breeds\" />\r\n        }\r\n\r\n        return (\r\n            <div className=\"full_page\">\r\n                <Button variant=\"primary\" type=\"button\" onClick={() => { this.props.handlebacktobreedpage(); }}>Back to Breed Pictures</Button>\r\n                <h1 className=\"text-center m-5\">Big picture of  {this.props.Capitalize(this.props.selectedDog)} dog</h1>\r\n                <img src={this.props.src} >\r\n\r\n                </img>\r\n            </div>\r\n\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport HomePage from './pages/HomePage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ButtonToolbar, Button } from 'react-bootstrap';\nimport BreedsPage from './pages/BreedsPage';\nimport SpecificDogPage from './pages/SpecificDogPage';\nimport Axios from \"axios\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dogbreeds: [],\n      srcOfRandomDogList: [],\n      value: 'select',\n      redirectToBreedsPage: false,\n      dogs: [],\n      isSelected: false\n    }\n    this.handleSelection = this.handleSelection.bind(this);\n    this.handlebacktohomepage = this.handlebacktohomepage.bind(this);\n    this.showSpecificDog = this.showSpecificDog.bind(this);\n    this.handlebacktobreedpage = this.handlebacktobreedpage.bind(this);\n    this.refreshPage = this.refreshPage.bind(this);\n    this.Capitalize = this.Capitalize.bind(this);\n\n\n  }\n\n\n  async   componentDidMount() {\n\n    var srcOfRandomDog = []\n    const res = await Axios.get('https://dog.ceo/api/breeds/list/all')\n    const breedNameArray = Object.keys(res.data.message)\n\n    for (let i = 0; i < breedNameArray.length; i++) {\n\n      const newRandom = await Axios.get('https://dog.ceo/api/breed/' + breedNameArray[i] + '/images/random')\n\n      srcOfRandomDog.push(newRandom);\n\n    }\n\n\n    this.setState({\n      dogbreeds: breedNameArray,\n      srcOfRandomDogList: srcOfRandomDog\n\n    });\n\n\n  }\n  async handleSelection(event) {\n\n\n    // this.props.onSelectedResult(parseInt(ev.target.getAttribute(\"data-index\")));\n    this.setState({\n      value: event.target.value\n\n\n    });\n\n    this.setState({\n\n      redirectToBreedsPage: true\n\n\n    });\n    const breedUrl = ('https://dog.ceo/api/breed/' + event.target.value + '/images')\n    const res2 = await Axios.get(breedUrl)\n    const dogsToShow = Object.values(res2.data.message)\n\n\n    this.setState({\n\n      dogs: dogsToShow\n\n    });\n\n  }\n\n  handlebacktohomepage() {\n\n    this.setState({\n      value: \"select\",\n      redirectToBreedsPage: false,\n\n    })\n\n\n  }\n  handlebacktobreedpage() {\n\n    this.setState({\n      isSelected: false\n\n\n    })\n\n\n  }\n  Capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  showSpecificDog(event) {\n    this.setState({\n      dogToBig: event.target.src,\n      isSelected: true\n    })\n\n\n  }\n  refreshPage() {\n    window.location.reload();\n  }\n  render() {\n\n\n\n    return (\n\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage dogbreeds={this.state.dogbreeds} handleSelection={this.handleSelection} redirectToBreedsPage={this.state.redirectToBreedsPage} srcOfRandomDogList1={this.state.srcOfRandomDogList} refreshPage={this.refreshPage} Capitalize={this.Capitalize} />\n        </Route>\n        <Route exact path=\"/breeds\">\n          <BreedsPage selectedDog={this.state.value} handlebacktohomepage={this.handlebacktohomepage} dogsView={this.state.dogs}\n            showSpecificDog={this.showSpecificDog} selected={this.state.isSelected} Capitalize={this.Capitalize} />\n\n        </Route>\n        <Route exact path=\"/specificbreed\">\n          <SpecificDogPage src={this.state.dogToBig} handlebacktobreedpage={this.handlebacktobreedpage} isSelected={this.state.isSelected} selectedDog={this.state.value} Capitalize={this.Capitalize} />\n\n        </Route>\n\n      </Switch>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\n\n\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}